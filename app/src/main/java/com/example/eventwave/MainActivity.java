package com.example.eventwave;

import android.Manifest;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.fragment.NavHostFragment;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import com.example.eventwave.api.TicketmasterService;
import com.example.eventwave.databinding.ActivityMainBinding;
import com.example.eventwave.utils.Constants;
import com.example.eventwave.viewmodel.EventViewModel;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.snackbar.Snackbar;

/**
 * üè† ACTIVIT√â PRINCIPALE - Point d'entr√©e de l'application
 * 
 * Responsabilit√©s :
 * - Gestion des permissions de localisation
 * - Configuration de la navigation entre fragments
 * - Initialisation du ViewModel partag√©
 * - Test de connexion API
 */
public class MainActivity extends AppCompatActivity {
    
    // üì± Code de demande pour la permission de localisation
    private static final int REQUEST_LOCATION_PERMISSION = Constants.LOCATION_PERMISSION_REQUEST_CODE;
    
    // üîó Composants principaux
    private ActivityMainBinding binding;          // ViewBinding pour acc√®s s√©curis√© aux vues
    private EventViewModel viewModel;             // ViewModel partag√© entre fragments
    private FusedLocationProviderClient fusedLocationClient; // Service de localisation Google
    private final Handler mainHandler = new Handler(Looper.getMainLooper()); // Handler pour UI thread
    private NavController navController;          // Contr√¥leur de navigation
    private AppBarConfiguration appBarConfiguration; // Configuration de la barre d'action

    /**
     * üöÄ M√âTHODE DE CR√âATION - Initialisation de l'activit√©
     * Appel√©e automatiquement lors du lancement de l'activit√©
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // üìê Configuration du View Binding pour acc√®s s√©curis√© aux vues
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // üß™ Test de connexion API en arri√®re-plan
        // Permet de v√©rifier rapidement si l'API Ticketmaster est accessible
        new Thread(() -> {
            new TicketmasterService().testApiConnection();
        }).start();

        // üîß Configuration de la Toolbar personnalis√©e
        Toolbar toolbar = binding.toolbar;
        setSupportActionBar(toolbar);

        // üìç Initialisation du service de localisation Google Play Services
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        
        // üß† Initialisation du ViewModel partag√© entre tous les fragments
        viewModel = new ViewModelProvider(this).get(EventViewModel.class);

        // üó∫Ô∏è Configuration du syst√®me de navigation
        setupNavigation();
        
        // üîí Demande des permissions de localisation
        requestLocationPermission();
    }

    /**
     * üß≠ CONFIGURATION DE LA NAVIGATION - Setup du Navigation Component
     * Configure la navigation entre les diff√©rents fragments de l'app
     */
    private void setupNavigation() {
        // üéØ R√©cup√©ration du NavHostFragment depuis le layout
        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager()
                .findFragmentById(R.id.nav_host_fragment);
        
        // üîó Obtention du NavController pour g√©rer la navigation
        if (navHostFragment != null) {
            navController = navHostFragment.getNavController();
            
            // üì± Configuration de la BottomNavigationView
            BottomNavigationView navView = binding.bottomNavigation;
            
            // ‚öôÔ∏è Configuration des destinations principales (sans fl√®che retour)
            appBarConfiguration = new AppBarConfiguration.Builder(
                    R.id.navigation_home,      // üè† Accueil
                    R.id.navigation_history,   // üìö Historique  
                    R.id.navigation_favorites, // ‚≠ê Favoris
                    R.id.navigation_settings)  // ‚öôÔ∏è Param√®tres
                    .build();
            
            // üîó Liaison de la Toolbar avec le NavController pour navigation automatique
            NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);
            
            // üîó Liaison de la BottomNavigationView avec le NavController
            NavigationUI.setupWithNavController(navView, navController);
        }
    }

    /**
     * üîí DEMANDE DE PERMISSION DE LOCALISATION
     * V√©rifie si la permission est accord√©e, sinon la demande √† l'utilisateur
     */
    private void requestLocationPermission() {
        // üîç V√©rification de l'√©tat actuel de la permission
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
            != PackageManager.PERMISSION_GRANTED) {
            
            // ‚ùå Permission non accord√©e : demande √† l'utilisateur
            ActivityCompat.requestPermissions(this, 
                new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 
                REQUEST_LOCATION_PERMISSION);
        } else {
            // ‚úÖ Permission d√©j√† accord√©e : r√©cup√©ration de la localisation
            getLocation();
        }
    }

    /**
     * üìç R√âCUP√âRATION DE LA LOCALISATION UTILISATEUR
     * Utilise FusedLocationProvider pour obtenir la position actuelle
     */
    private void getLocation() {
        // üîí Double v√©rification de la permission (s√©curit√©)
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
            == PackageManager.PERMISSION_GRANTED) {
            
            // üì° Demande de la derni√®re localisation connue
            fusedLocationClient.getLastLocation().addOnSuccessListener(this, location -> {
                if (location != null) {
                    // ‚úÖ Localisation obtenue : mise √† jour du ViewModel
                    viewModel.setUserLocation(location);
                    refreshEvents(); // üîÑ Chargement des √©v√©nements pour cette localisation
                } else {
                    // ‚ùå Localisation indisponible : message √† l'utilisateur
                    Snackbar.make(binding.getRoot(), R.string.location_not_found, 
                        Snackbar.LENGTH_LONG).show();
                }
            });
        }
    }

    /**
     * üîÑ RAFRA√éCHISSEMENT DES √âV√âNEMENTS
     * D√©clenche le chargement des √©v√©nements via le ViewModel
     */
    private void refreshEvents() {
        viewModel.refreshEvents();
    }

    /**
     * üì± GESTION DE LA R√âPONSE AUX PERMISSIONS
     * Callback appel√© quand l'utilisateur r√©pond √† la demande de permission
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, 
                                         @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        
        // üîç V√©rification que c'est bien notre demande de permission de localisation
        if (requestCode == REQUEST_LOCATION_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // ‚úÖ Permission accord√©e : r√©cup√©ration de la localisation
                getLocation();
            } else {
                // ‚ùå Permission refus√©e : fonctionnement en mode d√©grad√©
                Snackbar.make(binding.getRoot(), R.string.permission_denied, 
                    Snackbar.LENGTH_LONG).show();
                // üîÑ Chargement des √©v√©nements sans localisation (donn√©es g√©n√©riques)
                refreshEvents();
            }
        }
    }

    /**
     * üîô GESTION DU BOUTON RETOUR
     * Support pour la navigation avec le bouton "Up" dans la Toolbar
     */
    @Override
    public boolean onSupportNavigateUp() {
        return NavigationUI.navigateUp(navController, appBarConfiguration) 
            || super.onSupportNavigateUp();
    }
}